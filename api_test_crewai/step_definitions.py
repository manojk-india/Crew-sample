
            **Task**: [Generate the content of step definition file according to given feature file of python project]
            **Description**: [Generate the content of feature file of java maven project to run a cucumber test case for the given 
            acceptance criteria ]

            **Parameters**: 
            - api : http://127.0.0.1:5000/
            - api documentation: endpoint: /data, response code: 200
            - feature_file_content:[Task(used_tools=0, i18n=I18N(language='en'), thread=None, description="\n**Task**: [Generate the content of feature file]\n**Description**: [Generate the content of feature file of python project to run a cucumber test case for the given \nacceptance criteria ]\n\n**Parameters**: \n- api documentation: endpoint: /data, response code: 200\n- acceptance criteria : when user hits the data endpoint then it receives 200 as response code\n... [Add more parameters as needed.]\n\n**Note**: If you do your BEST WORK, I'll give you a $10,000 commission!\n", callback=None, agent=Agent(id=UUID('9b967276-ddac-4a30-ab59-1a1009578ac4'), role='Gherkin feature file generator expert', goal='\nprovide the content of the feature file in gherkin language \nwhen given the documentation of the api and the acceptance criteria for the test case', backstory='An expert in gherkin language with full knowledge about the syntax of the gherkin language\n                            and has worked in many projects to convert given english criteria to a gherkin test case content of feature file written in gherkin \n                            language required for testing an api using cucumber bdd framework in java maven project  ', max_rpm=None, memory=True, verbose=True, allow_delegation=True, tools=[], max_iter=20, agent_executor=CrewAgentExecutor(memory=ConversationSummaryMemory(llm=ChatGoogleGenerativeAI(verbose=True, model='models/gemini-1.5-flash', google_api_key=SecretStr('**********'), temperature=0.4, client=<google.ai.generativelanguage_v1beta.services.generative_service.client.GenerativeServiceClient object at 0x0000022814B80970>, default_metadata=()), input_key='input', memory_key='chat_history'), verbose=True, agent=RunnableAgent(runnable={
  input: RunnableLambda(...),
  tools: RunnableLambda(...),
  tool_names: RunnableLambda(...),
  agent_scratchpad: RunnableLambda(...),
  chat_history: RunnableLambda(lambda x: x['chat_history'])
}
| PromptTemplate(input_variables=['agent_scratchpad', 'chat_history', 'input', 'tool_names', 'tools'], partial_variables={'goal': '\nprovide the content of the feature file in gherkin language \nwhen given the documentation of the api and the acceptance criteria for the test case', 'role': 'Gherkin feature file generator expert', 'backstory': 'An expert in gherkin language with full knowledge about the syntax of the gherkin language\n                            and has worked in many projects to convert given english criteria to a gherkin test case content of feature file written in gherkin \n                            language required for testing an api using cucumber bdd framework in java maven project  '}, template='You are {role}.\n{backstory}\n\nYour personal goal is: {goal}TOOLS:\n------\nYou have access to only the following tools:\n\n{tools}\n\nTo use a tool, please use the exact following format:\n\n```\nThought: Do I need to use a tool? Yes\nAction: the tool you wanna use, should be one of [{tool_names}], just the name.\nAction Input: Any and all relevant information input and context for using the tool\nObservation: the result of using the tool\n```\n\nWhen you have a response for your task, or if you do not need to use a tool, you MUST use the format:\n\n```\nThought: Do I need to use a tool? No\nFinal Answer: [your response here]```This is the summary of your work so far:\n{chat_history}Begin! This is VERY important to you, your job depends on it!\n\nCurrent Task: {input}\n{agent_scratchpad}')
| RunnableBinding(bound=ChatGoogleGenerativeAI(verbose=True, model='models/gemini-1.5-flash', google_api_key=SecretStr('**********'), temperature=0.4, client=<google.ai.generativelanguage_v1beta.services.generative_service.client.GenerativeServiceClient object at 0x0000022814B80970>, default_metadata=()), kwargs={'stop': ['\nObservation']})
| ReActSingleInputOutputParser(), input_keys_arg=[], return_keys_arg=[], stream_runnable=True), tools=[], max_iterations=20, handle_parsing_errors=True, llm=ChatGoogleGenerativeAI(verbose=True, model='models/gemini-1.5-flash', google_api_key=SecretStr('**********'), temperature=0.4, client=<google.ai.generativelanguage_v1beta.services.generative_service.client.GenerativeServiceClient object at 0x0000022814B80970>, default_metadata=()), tools_handler=<crewai.agents.tools_handler.ToolsHandler object at 0x0000022814B81990>, force_answer_max_iterations=18), tools_handler=<crewai.agents.tools_handler.ToolsHandler object at 0x0000022814B81990>, cache_handler=<crewai.agents.cache.cache_handler.CacheHandler object at 0x00000228135E5C60>, step_callback=None, i18n=I18N(language='en'), llm=ChatGoogleGenerativeAI(verbose=True, model='models/gemini-1.5-flash', google_api_key=SecretStr('**********'), temperature=0.4, client=<google.ai.generativelanguage_v1beta.services.generative_service.client.GenerativeServiceClient object at 0x0000022814B80970>, default_metadata=()), function_calling_llm=None), expected_output=None, context=None, async_execution=False, output=None, tools=[], id=UUID('dd176d29-7ea6-4eef-949e-90c6b0be713f'))]


            **Note**: If you do your BEST WORK, I'll give you a $10,000 commission!

